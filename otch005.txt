Исследование поведения программы с процессом-родителем и процессом-ребенком, выполняющим разные действия
Цель: выяснить по поведению процессов, насколько процесс-ребенок независим от процесса-родителя

Исходный код программы:
//Программа, порождающая дочерний процесс (часть 2).
//Процесс-родитель и процесс-ребенок должны выполнять разные действия
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main() {
         pid_t procid, pprocid;
         int a=0, b;
         procid = getpid();
         pprocid = getppid();
         printf("id текущего процесса: %d\nid родительского процесса: %d\n", procid, pprocid);
         printf("Начальное значение а: %d\n", a);
         b = fork();
         if (b<0) {
                //Во время выполнения fork() произошла ошибка. Выходим из программы с возвратом кода -1.
                printf("Ошибка при выполнении fork()\n");
                exit(-1); //выход из программы.
         }
        else if (b==0) {
                printf("\n\nПоявился дочерний процесс\n");
                 a = a+1; //Проверяем изменение значения переменной а.
                procid = getpid();
                 pprocid = getppid();
                 printf("после вызова fork() в процессе ребенке%d\n", b);
                 printf("id текущего процесса:%d\nid текущего процесса:  %d\nНовое значение а: %d\n", procid, pprocid, a);
                }
         else  {
         printf("\n\nРодительский процесс после вызова fork() получил id ребенка: %d\n", b);
         a = a+1111; //Проверяем изменение значение переменной а.
         procid = getpid();
         pprocid = getppid();
         printf("Идентификатор процесса родителя:%d\n", procid);
         printf("После вызова fork %d\n", pprocid);
         printf("id текущего процесса:%d\nid родительского процесса: %d\nНовое значение а: %d\n ", procid, pprocid, a);
         }

 return 0;

}

Результат выполнения программы:

До вызова fork():
id текущего процесса: 17734
id родительского процесса: 17662
Начальное значение а: 0


Родительский процесс после вызова fork() получил id ребенка: 17735
Идентификатор процесса родителя:17734
После вызова fork 17662
id текущего процесса:17734
id родительского процесса: 17662
Новое значение а: 1111


Появился дочерний процесс
после вызова fork() в процессе ребенке0
id текущего процесса:17735
id текущего процесса:  17734
Новое значение а: 1

----
Значение переменной а внутри процесса-ребенка не зависит от значения переменной а внутри процесса-родителя. Из чего можно сделать вывод, что ребенок и родитель выполняются в отдельных адресных пространствах.


